<!DOCTYPE html>
<html lang="en">

<head>
    <title>Remindr: An Everyday Use App!</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="/main.css" />
    <link rel="stylesheet" type="text/css" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"/>
    <!-- https://fontawesome.bootstrapcheatsheets.com/ -->
</head>
<body>
    {{> navbar-landing-page}}

    <div class="modal-fade fadeIn" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Reminder</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true" onclick="redirect()">&times;</span>
            </button>        
          </div>
          <div class="modal-body fadeIn">
                <form action="/edit-reminder" method="POST">
                    <div class="form-group">
                        <input name="editReminderID" type="hidden" value="{{reminder._id}}">
                        <input type="text" class="form-control" name="name" placeholder="Reminder Title" value="{{reminder.name}}" required>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" name="description" placeholder="Description" value="{{reminder.description}}">
                    </div>
                    <ul class='list-group' id="subtaskListEdit">
                        {{#each reminder.subtasks}}
                            <li class="existingSubtasks wordWrap list-group-item">
                                <input type="checkbox" name="subtaskCheck" class="subtaskCheck" 
                                {{#if completed}}                                
                                    checked
                                {{/if}}
                                >
                                {{description}}
                                <input type="hidden" class="subtaskCompleted" name="subtaskCompleted" value="{{completed}}">
                                <button type="button" class="deleteSubtask btn btn-secondary float-right">Delete</button>
                            </li>
                        {{/each}}
                    </ul>
                    <input type="hidden" id="subtaskHiddenEdit" name="subtaskHiddenEdit">
                    <div class="form-group">
                        <input type="text" class="form-control" name="subtasksEdit" placeholder="New Subtask" id="newSubtaskEdit">
                        <button type="button" onclick="addSubtask()">Add</button>
                    </div>

                    <div id="tagListEdit">
                        {{#each reminder.tags}}
                            <button class="existingTags wordWrap btn btn-secondary" disabled>
                                {{this}}                                
                                <i class="fa fa-trash-o deleteTag"></i>
                            </button>
                        {{/each}}
                    </div>
                    <input type="hidden" id="tagHiddenEdit" name="tagHiddenEdit">
                    <div class="form-group" id="tag-container">
                        <input type="text" class="form-control" name="tags" placeholder="New Tag" id="newTagEdit">
                         <button type="button" onclick="addTag()">Add</button>
                    </div>

                    <div class="form-group">
                        <p id="existingDate"hidden>{{reminder.date}}</p>
                        <label for="pickDate">Remind Me At:</label>
                        <input class="form-control" type="datetime-local" id="pickDate"
                               name="pickDate" required>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="redirect()">Close</button>
                        <button type="submit" class="btn btn-primary">Save Edits</button>
                    </div>
                </form>
            </div>
        </div>
      </div>
    </div>

    <script
          src="https://code.jquery.com/jquery-3.4.1.min.js"
          integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
          crossorigin="anonymous">
    </script>
    <script src="/bootstrap/js/bootstrap.min.js"></script>

    <script>
        function redirect(){
            location.replace("/landing-page")
        }
        let subtaskArray = [];
        let subtaskHidden = document.getElementById("subtaskHiddenEdit");
        let tagHidden = document.getElementById("tagHiddenEdit");

        let tagArray = [];

        // get the ul element
        let subtaskList = document.getElementById("subtaskListEdit");
        let tagList = document.getElementById("tagListEdit");

        let dateObj = new Date(document.getElementById("existingDate").innerHTML);

        // Populate existing reminder datetime
        document.getElementById("pickDate").value = dateObj.toISOString().substring(0, 10) + "T" + dateObj.getHours() + ":" + dateObj.getMinutes();

        // Populate the existing subtasks into the array
        let existingSubtasks = subtaskList.getElementsByClassName("existingSubtasks");
        for (let i = 0; i < existingSubtasks.length; i++) {
            let description = existingSubtasks[i].innerText.replace("Delete", "");
            let checked = existingSubtasks[i].getElementsByClassName("subtaskCompleted")[0].value;
            let newSubtask = {completed: checked, description: description};
            // add it to the array of subtask objects
            subtaskArray.push(newSubtask);

            // save it to the hidden input that will be eventually sent to router.js as a json string
            subtaskHidden.value = JSON.stringify(subtaskArray);            
        }

        // Populate the existing tag into the array
        let existingTags = tagList.getElementsByClassName("existingTags");
        for (let i = 0; i < existingTags.length; i++) {
            let description = existingTags[i].innerText;
            let newTag = description;
            // add it to the array of tag objects
            tagArray.push(newTag);

            // save it to the hidden input that will be eventually sent to router.js as a json string
            tagHidden.value = JSON.stringify(tagArray);  
        }
        
        $(document).ready(function() {            
            // Store the status of checked
            $(".subtaskCheck").click(function() {
                let subtaskDescription = $(this).parent()[0].innerText.replace("Delete", "");
                let checked = $(this)[0].checked;
                subtaskArray.forEach(function(obj) {
                    if (obj.description === subtaskDescription) {
                        if (checked) {
                            obj.completed = true;
                        }
                        else {
                            obj.completed = false;
                        }
                    }
                });
                subtaskHidden.value = JSON.stringify(subtaskArray);
            });

            // disable enter button submitting form for every text input
            $(document).on("keypress", 'form', function (e) {
                var code = e.keyCode || e.which;
                if (code == 13) {
                    e.preventDefault();
                    return false;
                }
            });
            // handle delete for existing subtasks
            $('.deleteSubtask').click(function() {
                let description = $(this).parent()[0].innerText.replace("Delete", "");
                subtaskList.removeChild($(this).parent()[0]);  
                subtaskArray = subtaskArray.filter(function(obj) {
                    return obj.description !== description;
                });
                subtaskHidden.value = JSON.stringify(subtaskArray);
            });

            // handle delete for existing tags
            $('.deleteTag').click(function() {
                let description = $(this).parent()[0].innerText;
                tagList.removeChild($(this).parent()[0]);  
                tagArray = tagArray.filter(function( elem ) {
                  return elem !== description;
                });
                tagHidden.value = JSON.stringify(tagArray);
            });
        });

        // upon clicking add subtask button...
        function addSubtask(){
            let description = document.getElementById("newSubtaskEdit").value;
            let newSubtask = {completed: false, description: description};
            
            // add it to the array of subtask objects
            subtaskArray.push(newSubtask);

            // display it as a list on the html page
            subtaskDisplay(description); 

            // save it to the hidden input that will be eventually sent to router.js as a json string
            subtaskHidden.value = JSON.stringify(subtaskArray);

            // clearing out the previous input
            document.getElementById("newSubtaskEdit").value = "";
        }

        // display the list of subtasks that have been entered
        function subtaskDisplay(description) {
            // create an li element
            let li = document.createElement("li");
            li.setAttribute("class", "wordWrap list-group-item");    

            let checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.name="subtaskCheck";
            // Add an onclick to handle saving the checked status
            checkbox.onclick = function() {
                let subtaskDescription = description;
                let checked = checkbox.checked;
                subtaskArray.forEach(function(obj) {
                    if (obj.description === subtaskDescription) {
                        if (checked) {
                            obj.completed = true;
                        }
                        else {
                            obj.completed = false;
                        }
                    }
                });
                subtaskHidden.value = JSON.stringify(subtaskArray);
            }

            li.appendChild(checkbox);

            // add the description text to the li element
            li.appendChild(document.createTextNode(description));

            // append a delete button to the right side
            let deleteBtn = document.createElement("button");
            deleteBtn.type = "button";
            deleteBtn.setAttribute("class", "btn btn-secondary float-right");
            
            // when delete is clicked, remove from the html li, the subtaskArray, and also the subtaskHidden input
            deleteBtn.onclick = function() {
                subtaskList.removeChild(li);
                subtaskArray = subtaskArray.filter(function( obj ) {
                  return obj.description !== description;
                });
                subtaskHidden.value = JSON.stringify(subtaskArray);
            }
            deleteBtn.innerHTML = "Delete";
            li.appendChild(deleteBtn);

            subtaskList.appendChild(li);
        }

        // upon clicking add subtask button...
        function addTag(){
            let description = document.getElementById("newTagEdit").value;
            let newTag = description;
            
            // add it to the array of subtask objects
            tagArray.push(newTag);

            // display it as a list on the html page
            tagDisplay(description); 

            // save it to the hidden input that will be eventually sent to router.js as a json string
            tagHidden.value = JSON.stringify(tagArray);

            // clearing out the previous input
            document.getElementById("newTagEdit").value = "";
        }

        let colors = ['#ca7159', '#f0ebe2','#cbc0aa','#f3d18e','#b7cdc2', '#84a295', '#9fb6c3', '#f9b49b','#edb1ae'];

        // display the list of subtasks that have been entered
        function tagDisplay(description) {            
            let btn = document.createElement("button");
            btn.disabled = true;
            // btn.setAttribute("class", "tag");
            btn.setAttribute("class", 'tag');
            btn.style = 'margin:2px 5px 2px; border-radius: 12px; color:white'

            btn.appendChild(document.createTextNode(description));

            // append a delete button to the right side
            let deleteBtn = document.createElement("i");
            deleteBtn.setAttribute("class", "fa fa-trash-o");
            
            // when delete is clicked, remove from the html li, the subtaskArray, and also the subtaskHidden input
            deleteBtn.onclick = function() {
                tagList.removeChild(btn);
                tagArray = tagArray.filter(function( elem ) {
                  return elem !== description;
                });
                tagHidden.value = JSON.stringify(tagArray);
            }
           
            btn.appendChild(deleteBtn);

            tagList.appendChild(btn);
        }
    </script>
</body>
</html>